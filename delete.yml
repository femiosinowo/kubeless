apiVersion: kubeless.io/v1beta1
kind: Function
metadata:
  finalizers:
    - kubeless.io/function
  generation: 1
  labels:
    created-by: kubeless
    function: delete
  name: delete
spec:
  deployment:
    metadata:
      creationTimestamp: null
    spec:
      selector: null
      strategy: {}
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers: null
    status: {}
  deps: |
    {
      "name": "todos",
      "version": "0.1.0",
      "description": "Todo service built with Serverless",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "author": "",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.4",
        "mongodb": "^2.2.30",
        "uuid": "^2.0.3"
      },
      "devDependencies": {
        "serverless-kubeless": "^0.7.0"
      }
    }
  function: >-
    'use strict';

    const _ = require('lodash');
    const mongodb = require('mongodb');

    const MongoClient = mongodb.MongoClient;
    const url = 'mongodb://mongodb:27017/todo_app';

    module.exports = {
      delete: (event, context) => new Promise((resolve, reject) => {
        MongoClient.connect(url, (err, db) => {
          if (err) {
            reject(err);
          } else {
            db.collection('todos', (errC, doc) => {
              if (errC) {
                reject(ferr);
              } else {
                doc.find().toArray((ferr, docEntries) => {
                  if (ferr) {
                    reject(ferr);
                  } else {
                    const entry = _.find(docEntries, e => e.id === event.extensions.request.query.id);
                    doc.deleteOne(entry, (derr) => {
                      if (derr) {
                        reject(derr);
                      } else {
                        db.close();
                        resolve(JSON.stringify(entry));
                      }
                    });
                  }
                });
              }
            });
          }
        });
      }),
    };  
  function-content-type: ''
  handler: todos-delete.delete
  horizontalPodAutoscaler:
    metadata:
      creationTimestamp: null
    spec:
      maxReplicas: 0
      scaleTargetRef:
        kind: ''
        name: ''
    status:
      conditions: null
      currentMetrics: null
      currentReplicas: 0
      desiredReplicas: 0
  runtime: nodejs6
  service:
    ports:
      - name: http-function-port
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      function: delete
    type: ClusterIP
  timeout: '180'
