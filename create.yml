apiVersion: kubeless.io/v1beta1
kind: Function
metadata:
  finalizers:
    - kubeless.io/function
  generation: 1
  labels:
    created-by: kubeless
    function: create
  name: create
spec:
  deployment:
    metadata:
      creationTimestamp: null
    spec:
      selector: null
      strategy: {}
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers: null
    status: {}
  deps: |
    {
      "name": "todos",
      "version": "0.1.0",
      "description": "Todo service built with Serverless",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "author": "",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.4",
        "mongodb": "^2.2.30",
        "uuid": "^2.0.3"
      },
      "devDependencies": {
        "serverless-kubeless": "^0.7.0"
      }
    }
  function: >-
    'use strict';
    const mongodb = require('mongodb');
    const uuid = require('uuid');

    const MongoClient = mongodb.MongoClient;
    const url = 'mongodb://mongodb:27017/todo_app';

    module.exports = {
      create: (event, context) => new Promise((resolve, reject) => {
          const data = event.data;
          data.id = uuid.v1();
          data.updatedAt = new Date().getTime();
          MongoClient.connect(url, (cerr, db) => {
            if (cerr) {
              reject(cerr);
            } else {
              db.collection('todos').insertOne(data, (errInsert) => {
                if (errInsert) {
                  reject(errInsert);
                } else {
                  resolve(JSON.stringify(data));
                  db.close();
                }
              });
            }
        });
      }),
    };  
  function-content-type: ''
  handler: todos-create.create
  horizontalPodAutoscaler:
    metadata:
      creationTimestamp: null
    spec:
      maxReplicas: 0
      scaleTargetRef:
        kind: ''
        name: ''
    status:
      conditions: null
      currentMetrics: null
      currentReplicas: 0
      desiredReplicas: 0
  runtime: nodejs6
  service:
    ports:
      - name: http-function-port
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      function: create
    type: ClusterIP
  timeout: '180'
